// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum EventCategory {
  Sports
  Conferences
  Expos
  Concerts
  Festivals
  ArtPerformance
}

enum EventStatus {
  ComingSoon
  Available
  Finished
}

enum TransactionStatus {
  Pending
  Paid
  Cancel
}

enum DiscountType {
  Nominal
  Percent
}

model User {
  id             Int           @id @default(autoincrement())
  name           String
  email          String        @unique
  profilePicture String?       @db.LongText
  password       String        @db.LongText
  isActive       Boolean       @default(true)
  referral       String?       @unique
  isRedeem       Boolean       @default(false)
  accountType    String        @default("user")
  Transaction    Transaction[]
  PointUser PointUser[]
  Review    Review[]
}

model Organizer {
  id             Int     @id @default(autoincrement())
  name           String
  email          String  @unique
  profilePicture String? @db.LongText
  password       String  @db.LongText
  accountType    String  @default("organizer")
  isActive       Boolean @default(true)
  events         Event[]
}

model Promo {
  id              Int           @id @default(autoincrement())
  eventId         Int
  name            String
  discount        Int
  discountType    DiscountType
  minimalPurchase Int           @default(0)
  StartDate       DateTime      @default(now())
  endDate         DateTime      @default(now())
  event           Event         @relation(fields: [eventId], references: [id])
  Transaction     Transaction[]
}

model Event {
  id                Int           @id @default(autoincrement())
  name              String        @unique
  organizerId       Int
  startSale         DateTime      @default(now())
  eventDate         DateTime      @default(now())
  status            EventStatus
  isFree            Boolean       @default(true)
  price             Int?
  slug              String        @unique
  category          EventCategory
  city              String
  address           String
  availableTickets  Int
  backgroundTickets String?
  background1       String?
  backgorund2       String?
  background3       String?  
  descriptionTickets String?       
  description       String?       @db.LongText
  organizer        Organizer     @relation(fields: [organizerId], references: [id])
  Transaction      Transaction[]
  Review           Review[]
  Promo            Promo[]
}

model Transaction {
  id                Int               @id @default(autoincrement())
  userId            Int
  eventId           Int
  quantity          Int
  transactionStatus TransactionStatus
  grandTotal        Int
  currency          String //gausah
  paymentMethod     String //gausah
  transactionDate   DateTime          @default(now()) //gausah
  createdAt         DateTime          @default(now())
  createdBy         String //gausah
  updatedAt         DateTime          @updatedAt //gausah
  updatedBy         String //gausah
  event             Event             @relation(fields: [eventId], references: [id])
  user              User              @relation(fields: [userId], references: [id])
  Promo             Promo?            @relation(fields: [promoId], references: [id])
  promoId           Int?
}

model Review {
  id      Int    @id @default(autoincrement())
  userId  Int
  eventId Int
  rating  Int
  descriptionReview  String
  user    User   @relation(fields: [userId], references: [id])
  event   Event  @relation(fields: [eventId], references: [id])
}

model PointUser {
  id       Int      @id @default(autoincrement())
  userId   Int
  point    Int
  expireAt DateTime
  isRedeem Boolean  @default(false)
  user     User     @relation(fields: [userId], references: [id])
}

// model User {
//   id        Int          @id @default(autoincrement())
//   name      String
//   email     String       @unique
//   createdAt DateTime     @default(now())
//   updatedAt DateTime     @updatedAt
//   transactions Transaction[]
//   reviews   EventReview[]
//   // Add other fields as necessary
// }
