// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum EventStatus {
  ComingSoon
  Available
  Finished
  Cancelled
  SoldOut
}

enum EventCategory {
  Sports
  Conferences
  Expos
  Concerts
  Festivals
  ArtPerformance
}

enum TransactionStatus {
  WaitingPayment
  WaitingConfirmation
  Paid
  Cancelled
  Declined
}

enum DiscountType {
  Nominal
  Percent
}

model User {
  id             Int           @id @default(autoincrement())
  name           String
  email          String        @unique
  profilePicture String?       @db.LongText
  password       String        @db.LongText
  isActive       Boolean       @default(false)
  referral       String?       @unique
  isRedeem       Boolean       @default(true)
  RedeemExpire   DateTime?
  accountType    String        @default("user")
  Transaction    Transaction[]
  review         review[]
  PointUser      PointUser[]
}

model Organizer {
  id             Int     @id @default(autoincrement())
  name           String
  email          String  @unique
  profilePicture String? @db.LongText
  password       String  @db.LongText
  accountType    String  @default("organizer")
  isActive       Boolean @default(false)
  event          Event[]
}

model Event {
  id               Int           @id @default(autoincrement())
  name             String        @unique
  organizerId      Int
  startSale        DateTime      @default(now())
  eventDate        DateTime      @default(now())
  status           EventStatus
  isFree           Boolean       @default(true)
  price            Int?
  slug             String        @unique
  category         EventCategory
  city             String
  address          String
  availableTickets Int
  description      String?       @db.LongText
  organizer        Organizer     @relation(fields: [organizerId], references: [id])
  Transaction      Transaction[]
  review           review[]
  Promo            Promo[]
}

model Promo {
  id              Int           @id @default(autoincrement())
  eventId         Int
  name            String
  discount        Int
  discountType    DiscountType
  minimalPurchase Int           @default(0)
  StartDate       DateTime      @default(now())
  endDate         DateTime      @default(now())
  event           Event         @relation(fields: [eventId], references: [id])
  Transaction     Transaction[]
}

model Transaction {
  id            Int               @id @default(autoincrement())
  userId        Int
  eventId       Int
  quantity      Int
  promoId       Int?
  useReferral   Boolean           @default(false)
  PointUsed     Int?
  totalDiscount Int?
  total         Int
  grandTotal    Int
  status        TransactionStatus
  imageUrl      String?
  createdAt     DateTime          @default(now())
  paidAt        DateTime?
  confirmedAt   DateTime?
  user          User              @relation(fields: [userId], references: [id])
  event         Event             @relation(fields: [eventId], references: [id])
  promo         Promo?            @relation(fields: [promoId], references: [id])
}

model review {
  id      Int    @id @default(autoincrement())
  userId  Int
  eventId Int
  Rating  Int
  Review  String
  user    User   @relation(fields: [userId], references: [id])
  event   Event  @relation(fields: [eventId], references: [id])
}

model PointUser {
  id       Int      @id @default(autoincrement())
  userId   Int
  point    Int      @default(10000)
  expireAt DateTime
  isRedeem Boolean  @default(false)
  user     User     @relation(fields: [userId], references: [id])
}
